// import React, { useState } from 'react';
// import RegionDetails from './RegionDetails';
// import DistrictDetails from './DistrictDetails';

// const SidePanel = ({ selectedRegion, districts, cities, onResetSelection, hoveredRegion, onDistrictClick, selectedDistrict, selectedCity, setSelectedDistrictCityInfo, selectedDistrictCityInfo, setSelectedRegionInfo, handleDistrictClick, colorScale, currentCities }) => { // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É —Ç–µ–±—è –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ selectedCity
//     return (
//         <div className="control-panel">
//             <h2 className="text-xl font-bold mb-4">–û–±–ª–∞—Å—Ç–∏ –ë–∞–≤–∞—Ä–∏–∏</h2>

//             {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≤–µ–¥—ë–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ (–µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π) */}
//             {hoveredRegion && !selectedRegion && (
//                 <div className="mb-4 p-3 bg-gray-100 rounded">
//                     <h3 className="text-lg font-semibold">{hoveredRegion.properties.name}</h3>
//                     <p className="text-lg">–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {hoveredRegion.properties.population.toLocaleString()} —á–µ–ª.</p>
//                     <p className="text-lg">–ü–ª–æ—â–∞–¥—å: {hoveredRegion.properties.area.toFixed(2)} –∫–º¬≤</p>
//                 </div>
//             )}

//             {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ - –û–°–¢–ê–í–õ–Ø–ï–ú –í–°–ï–ì–î–ê, –ï–°–õ–ò selectedRegion –µ—Å—Ç—å */}
//             {selectedRegion && (
//                 <RegionDetails
//                     selectedRegion={selectedRegion}
//                     districts={districts}
//                     cities={cities}
//                     onDistrictClick={onDistrictClick}
//                     setSelectedDistrictCityInfo={setSelectedDistrictCityInfo}
//                     selectedDistrictCityInfo={selectedDistrictCityInfo}
//                     setSelectedRegionInfo={setSelectedRegionInfo}
//                     // currentCities={currentCities}
//                     currentCities={!selectedDistrict ? currentCities : null}
//                     colorScale={colorScale}
//                 />
//             )}

//             <DistrictDetails
//                 selectedDistrict={selectedDistrict}
//                 currentCities={currentCities}
//             />
//             {/* –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –≤—ã–±–æ—Ä–∞ */}
//             {selectedRegion && (
//                 <button
//                     className="mt-3 px-4 py-2 bg-blue-500 text-blue-950 rounded hover:bg-blue-600"
//                     onClick={() => {
//                         onResetSelection();
//                     }}
//                 >
//                     –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä
//                 </button>
//             )}

//             {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ */}
//             {!selectedRegion && (
//                 <div className="text-gray-600">
//                     –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
//                 </div>
//             )}
//         </div>
//     );
// };

// export default SidePanel;

import React, { useState } from 'react';
import RegionDetails from './RegionDetails';
import DistrictDetails from './DistrictDetails';
import CityDetails from './CityDetails';

const SidePanel = ({ selectedRegion, districts, cities, onResetSelection, hoveredRegion, onDistrictClick, selectedDistrict, selectedCity, setSelectedDistrictCityInfo, selectedDistrictCityInfo, setSelectedRegionInfo, handleDistrictClick, colorScale, currentCities, clickedCity, setClickedCity, selectedCityInDistrict }) => {
    const [activeTab, setActiveTab] = useState('regions');
    const isDistrictsTabActive = selectedRegion;
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è/–ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞
    const [showList, setShowList] = useState(true);

    const isIndependentCity = selectedDistrictCityInfo &&
        (selectedDistrictCityInfo.properties.name.includes('Kreisfreiestadt') ||
            selectedDistrictCityInfo.properties.name.includes('Landeshauptstadt'));

    const handleTabClick = (tabName) => {
        setActiveTab(tabName);
    };

    const CityItem = ({ city, isSelected, onClick }) => {
        return (
            <div
                className={`p-2 bg-gray-50 rounded cursor-pointer hover:bg-gray-100 scrollable-list-item 
                        ${isSelected ? 'bg-teal-100 font-bold' : ''}`}
                onClick={onClick}
            >
                <p>{city.properties.name}</p>
            </div>
        );
    };

    const getCityKey = (city) => {
        if (!city.properties['land-id'] || !city.properties.id) {
            // console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:", city);
            return Math.random().toString(); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ
        }
        return `${city.properties['land-id']}${city.properties.id}`;
    };

    // const isCity = selectedCityInDistrict && selectedCityInDistrict.properties && selectedCityInDistrict.properties['land-id'];
    const defaultText = "W√§hlen Sie einen Landkreis auf der Karte aus, um Informationen √ºber den Landkreis und eine Liste der St√§dte im Landkreis anzuzeigen.";

    return (
        <div className="control-panel">
            <h2 className="text-xl font-bold mb-4 text-center text-[#253494]">Bayern</h2>

            {/* –ö–Ω–æ–ø–∫–∏ "–û–±–ª–∞—Å—Ç–∏" –∏ "–ö—Ä–∞—è" */}
            <div className="side-panel-buttons mb-4 flex space-x-2">
                <button
                    className={`px-4 py-2 rounded ${activeTab === 'regions' ? 'bg-blue-500 text-blue-950' : 'bg-gray-300 text-gray-700 hover:bg-gray-400'}`}
                    onClick={() => handleTabClick('regions')}
                >
                    Bezirke
                </button>
                <button
                    className={`px-4 py-2 rounded ${activeTab === 'districts' ? 'bg-blue-500 text-blue-950' : 'bg-gray-300 text-gray-700'
                        } ${!isDistrictsTabActive ? 'opacity-50 cursor-not-allowed pointer-events-none' : 'hover:bg-gray-400'
                        }`}
                    onClick={() => isDistrictsTabActive && handleTabClick('districts')}
                    disabled={!isDistrictsTabActive}
                >
                    Landkreis, kreisfreien St√§dte
                </button>
            </div>

            {/* –ö–æ–Ω—Ç–µ–Ω—Ç –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ */}
            <div className="side-panel-content">
                {/* –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –≤–∫–ª–∞–¥–∫–∞ "–û–±–ª–∞—Å—Ç–∏" */}
                {activeTab === 'regions' && !selectedRegion && (
                    <div className="text-base text-gray-600 mt-4">
                        Klicken Sie auf einen Bezirk, um detaillierte Informationen zu erhalten
                    </div>
                )}

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≤–µ–¥—ë–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ - –≤–∫–ª–∞–¥–∫–∞ "–û–±–ª–∞—Å—Ç–∏" */}
                {activeTab === 'regions' && hoveredRegion && !selectedRegion && (
                    <div className="mb-4 p-3 bg-gray-100 rounded">
                        <h3 className="text-lg font-semibold">{hoveredRegion.properties.name}</h3>
                        <p className="text-lg">Bev√∂lkerung: {hoveredRegion.properties.population.toLocaleString()} Einw.</p>
                        <p className="text-lg">Fl√§che: {hoveredRegion.properties.area.toFixed(2)} km¬≤</p>
                    </div>
                )}

                {/* RegionDetails - –≤–∫–ª–∞–¥–∫–∞ "–û–±–ª–∞—Å—Ç–∏" */}
                {activeTab === 'regions' && selectedRegion && (
                    <RegionDetails
                        handleTabClick={handleTabClick}
                        selectedRegion={selectedRegion}
                        districts={districts}
                        cities={cities}
                        onDistrictClick={onDistrictClick}
                        setSelectedDistrictCityInfo={setSelectedDistrictCityInfo}
                        selectedDistrictCityInfo={selectedDistrictCityInfo}
                        setSelectedRegionInfo={setSelectedRegionInfo}
                        currentCities={!selectedDistrict ? currentCities : null}
                        colorScale={colorScale}
                    />
                )}
                {/* currentCities={isIndependentCity ? null : currentCities} */}
                {/* W√§hlen Sie eine Stadt im ausgew√§hlten Gebiet, um Informationen anzuzeigen. */}
                {/* –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ö—Ä–∞—è" */}
                {activeTab === 'districts' && selectedRegion && (
                    <div className="district-tab-content">
                        <p className="text-sm text-sm/4 text-gray-600 mb-2">
                            {isIndependentCity
                                ? defaultText
                                : selectedDistrict
                                    ? "W√§hlen Sie eine Stadt im ausgew√§hlten Landkreis, um Informationen zu erhalten."
                                    : defaultText
                            }
                        </p>
                        <DistrictDetails
                            selectedDistrict={selectedDistrict}
                            currentCities={isIndependentCity ? null : currentCities} // currentCities –¥–ª—è –∫—Ä–∞–µ–≤ - ? –Ω—É–∂–Ω–æ –ª–∏?
                        />
                        {showList && !isIndependentCity && (
                            <div className="scrollable-list" style={{ maxHeight: '250px', overflowY: 'auto' }}>
                                <h5 className="font-semibold mt-2">üèûÔ∏è St√§dte / Gemeinde:</h5>
                                <ul className="space-y-2">
                                    {/* –£—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ */}
                                    {(selectedDistrict
                                        ? currentCities.filter(city => city.properties['land-id'] === selectedDistrict.properties.id) // –§–∏–ª—å—Ç—Ä –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫—Ä–∞—é
                                        : currentCities
                                    ).map(city => (
                                        <li key={getCityKey(city)}>
                                            <div
                                                className={`p-1 bg-gray-50 rounded cursor-pointer hover:bg-gray-100 scrollable-list-item 
                                            ${selectedDistrictCityInfo?.properties.id === city.properties.id ? 'bg-teal-100 font-bold' : ''}`}>
                                                <CityItem
                                                    city={city}
                                                    isSelected={selectedDistrictCityInfo?.properties.id === city.properties.id}
                                                    onClick={() => {
                                                        setSelectedDistrictCityInfo(city);
                                                        clickedCity(city)
                                                    }
                                                    }
                                                />
                                            </div>
                                        </li>
                                    ))}
                                </ul>
                            </div>
                        )}
                        <CityDetails
                            selectedCityInDistrict={selectedCityInDistrict}
                        />

                        {/* {isCity && ( // <---- –£–°–õ–û–í–ù–´–ô –†–ï–ù–î–ï–†–ò–ù–ì: —Ä–µ–Ω–¥–µ—Ä–∏–º CityDetails –¢–û–õ–¨–ö–û –µ—Å–ª–∏ clickedCity - –≥–æ—Ä–æ–¥ (–ø—Ä–æ–≤–µ—Ä—è–µ–º land-id)
                            <CityDetails
                                selectedCityInDistrict={selectedCityInDistrict}
                            />
                        )} */}

                    </div>
                )}
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –≤—ã–±–æ—Ä–∞ - –≤–∫–ª–∞–¥–∫–∏ "–û–±–ª–∞—Å—Ç–∏" –∏ "–ö—Ä–∞—è" */}
            {(activeTab === 'regions' || activeTab === 'districts') && selectedRegion && (
                <button
                    className="px-4 py-2 bg-blue-500 text-blue-950 rounded hover:bg-blue-600"
                    onClick={() => {
                        onResetSelection();
                        setActiveTab('regions'); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫—É "–û–±–ª–∞—Å—Ç–∏" –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
                    }}
                >
                    Map Zur√ºcksetzen
                </button>
            )}
        </div>
    );
};

export default SidePanel;




// {
//     showList && selectedDistrict && (
//         <div className="scrollable-list" style={{ maxHeight: '320px', overflowY: 'auto' }}>
//             <h5 className="font-semibold mt-2">üèûÔ∏è St√§dte / Gemeinde:</h5>
//             <ul className="space-y-2">
//                 {currentCities.map(city => (
//                     <li key={city.properties.id}>
//                         <div
//                             className={`p-2 bg-gray-50 rounded cursor-pointer hover:bg-gray-100 scrollable-list-item
//                                             ${selectedDistrictCityInfo?.properties.id === city.properties.id ? 'bg-teal-100 font-bold' : ''}`} // <----  –ö–õ–ê–°–°–´ TAILWIND –î–õ–Ø –í–´–î–ï–õ–ï–ù–ò–Ø
//                             onClick={() => {
//                                 clickedCity(city);
//                             }}
//                         >
//                             <p>{city.properties.name}</p>
//                             <p>–ü–ª–æ—â–∞–¥—å: {city.properties.area.toFixed(2)} –∫–º¬≤</p>
//                             <p>–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {city.properties.population.toLocaleString()} —á–µ–ª.</p>
//                             <p>M√§nner: {city.properties.population_man.toLocaleString()} —á–µ–ª.</p>
//                             <p>Frauen: {city.properties.population_woman.toLocaleString()} —á–µ–ª.</p>
//                             <p>–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {(city.properties.population / city.properties.area).toFixed(1)} —á–µ–ª/–∫–º¬≤</p>
//                         </div>
//                     </li>
//                 ))}
//             </ul>
//         </div>
//     )
// }